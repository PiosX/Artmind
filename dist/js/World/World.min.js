function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,_toPropertyKey(n.key),n)}}function _createClass(t,e,o){return e&&_defineProperties(t.prototype,e),o&&_defineProperties(t,o),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0===o)return("string"===e?String:Number)(t);o=o.call(t,e||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}import{Vector2}from"../../../../node_modules/three/build/three.module.js";import{createCamera}from"./components/camera.min.js";import{createCube}from"./components/cube.min.js";import{createScene}from"./components/scene.min.js";import{createControls}from"./systems/controls.min.js";import{createRenderer}from"./systems/renderer.min.js";import{Resizer}from"./systems/Resizer.min.js";import{Loop}from"./systems/Loop.min.js";import{CurtainShader}from"./components/effect.min.js";import{RGBAShader}from"./components/effect2.min.js";import{EffectComposer}from"https://cdn.skypack.dev/three@0.128.0/examples/jsm/postprocessing/EffectComposer.js";import{RenderPass}from"https://cdn.skypack.dev/three@0.128.0/examples/jsm/postprocessing/RenderPass.js";import{ShaderPass}from"https://cdn.skypack.dev/three@0.128.0/examples/jsm/postprocessing/ShaderPass.js";import{GUI}from"./../../../node_modules/dat.gui/build/dat.gui.module.js";import{gsap}from"./../../../node_modules/gsap/all.js";var renderer,scene,loop,mouse=new Vector2,target=new Vector2,windowHalf=new Vector2(window.innerWidth/2,window.innerHeight/2),camera=createCamera(),cube=createCube(),content=document.querySelectorAll(".content__subtitle"),numbers=document.querySelectorAll(".counter__text"),logoMain=document.querySelectorAll(".logo__main"),sublogo=document.querySelectorAll(".logo__main__sub"),mask=document.querySelector(".mask"),World=function(){function e(t){_classCallCheck(this,e),renderer=createRenderer(),scene=createScene(),loop=new Loop(camera,scene,renderer),t.append(renderer.domElement),this.initPost(),this.render(),cube.groups.forEach(function(t){scene.add(t)}),this.clickCounter=0,this.time=0,this.mouse=new Vector2,this.target=new Vector2,this.windowHalf=new Vector2(window.innerWidth/2,window.innerHeight/2),document.addEventListener("mousemove",this.onMouseMove,!1),this.resizer=new Resizer(t,camera,renderer,this.composer),this.settings(),this.logoAnimations()}return _createClass(e,[{key:"settings",value:function(){var e=this;this.settings={progress:0,progress1:0,runAnimation:function(){e.runAnimation()}},this.gui=new GUI,this.gui.add(this.settings,"progress1",0,1,.01).onChange(function(t){e.effectPass.uniforms.uProgress.value=t}),mask.addEventListener("mousedown",this.settings.runAnimation),this.gui.hide()}},{key:"runAnimation",value:function(){mask.style.display="none",setTimeout(function(){mask.style.display="block"},2e3),8!=this.clickCounter?this.clickCounter++:this.clickCounter=0;var t=gsap.timeline();if(0==this.clickCounter){for(var e=0;e<content.length;e++)content[e].style.opacity="0";this.conAnimation(content[0],content[8]),gsap.to(numbers[7],{opacity:0,duration:2}),gsap.to(numbers[8],{opacity:0,duration:2}),this.numberAnim(numbers[0])}1==this.clickCounter&&(this.conAnimation(content[1],content[0]),this.numberAnim(numbers[1])),2==this.clickCounter&&(this.conAnimation(content[2],content[1]),this.numberAnim(numbers[2])),3==this.clickCounter&&(this.conAnimation(content[3],content[2]),this.hideNum(numbers[0]),this.hideNum(numbers[1]),this.numberAnim(numbers[3]),gsap.to(numbers[2],{x:"-5rem",duration:2})),4==this.clickCounter&&(this.conAnimation(content[4],content[3]),gsap.fromTo(numbers[2],{x:"-5rem",duration:1},{x:"-8rem",opacity:0}),gsap.to(numbers[3],{x:"-4rem",duration:2})),5==this.clickCounter&&(this.conAnimation(content[5],content[4]),this.numberAnim(numbers[5])),6==this.clickCounter&&(this.conAnimation(content[6],content[5]),this.numberAnim(numbers[6])),7==this.clickCounter&&(this.conAnimation(content[7],content[6]),this.numberAnim(numbers[7])),8==this.clickCounter&&(this.conAnimation(content[8],content[7]),this.numberAnim(numbers[8]),this.hideNum(numbers[3]),this.hideNum(numbers[6]),this.hideNum(numbers[5]),gsap.to(numbers[7],{x:"-8rem",duration:2})),2e4==camera.position.x?t.to(camera.position,{x:0,duration:1.5,ease:"power4.inOut"}):t.to(camera.position,{x:camera.position.x+2500,duration:1.5,ease:"power4.inOut"}),t.to(this.effectPass.uniforms.uProgress,{value:1,duration:1,ease:"power3,inOut"},0),t.to(this.effectPass.uniforms.uProgress,{value:0,duration:1,ease:"power3,inOut"},1),t.to(this.effectPass1.uniforms.uProgress,{value:1,duration:1,ease:"power3,inOut"},0),t.to(this.effectPass1.uniforms.uProgress,{value:0,duration:1,ease:"power3,inOut"},1)}},{key:"logoAnimations",value:function(){logoMain.forEach(function(t){gsap.to(t,{transform:"translate(-50%,-50%) rotate(-45deg)",duration:.5,delay:2}),gsap.to(t,{transform:"translate(-50%,-50%) rotate(0)",duration:.5,delay:4}),gsap.to(t,{transform:"translate(-50%,-50%) rotate(45deg)",duration:.5,delay:6}),gsap.to(t,{transform:"translate(-50%,-50%) rotate(0)",duration:.5,delay:8})}),gsap.to(sublogo[0],{transform:"translate(-50%,-50%) rotate(-45deg)",duration:.5,delay:2}),gsap.to(sublogo[1],{transform:"translate(-50%,-50%) rotate(0)",duration:.5,delay:4}),gsap.to(sublogo[2],{transform:"translate(-50%,-50%) rotate(45deg)",duration:.5,delay:6}),sublogo.forEach(function(t){gsap.to(t,{transform:"translate(-50%,-50%) rotate(0)",duration:.5,delay:8})}),setInterval(function(){logoMain.forEach(function(t){gsap.to(t,{transform:"translate(-50%,-50%) rotate(-45deg)",duration:.5,delay:2}),gsap.to(t,{transform:"translate(-50%,-50%) rotate(0)",duration:.5,delay:4}),gsap.to(t,{transform:"translate(-50%,-50%) rotate(45deg)",duration:.5,delay:6}),gsap.to(t,{transform:"translate(-50%,-50%) rotate(0)",duration:.5,delay:8.5})}),gsap.to(sublogo[0],{transform:"translate(-50%,-50%) rotate(-45deg)",duration:.5,delay:2}),gsap.to(sublogo[1],{transform:"translate(-50%,-50%) rotate(0)",duration:.5,delay:4}),gsap.to(sublogo[2],{transform:"translate(-50%,-50%) rotate(45deg)",duration:.5,delay:6}),sublogo.forEach(function(t){gsap.to(t,{transform:"translate(-50%,-50%) rotate(0)",duration:.5,delay:8.5})})},9e3)}},{key:"conAnimation",value:function(t,e){t.style.display="block",e.style.display="none",e.style.opacity="0",gsap.timeline().to(t,{opacity:1,duration:2})}},{key:"numberAnim",value:function(t){gsap.fromTo(t,{opacity:0,x:"20rem"},{opacity:1,x:"0",duration:2})}},{key:"hideNum",value:function(t){gsap.fromTo(t,{opacity:1,x:"0"},{opacity:0,x:"-8rem",duration:2})}},{key:"initPost",value:function(){this.composer=new EffectComposer(renderer);var t=new RenderPass(scene,camera);this.composer.addPass(t),this.effectPass=new ShaderPass(CurtainShader),this.composer.addPass(this.effectPass),this.effectPass1=new ShaderPass(RGBAShader),this.composer.addPass(this.effectPass1)}},{key:"onMouseMove",value:function(t){mouse.x=t.clientX-windowHalf.x,mouse.y=t.clientY-windowHalf.x}},{key:"render",value:function(){var t=this;requestAnimationFrame(this.render.bind(this)),this.time+=.05,this.oscilator=.5*Math.sin(.1*this.time)+.5,renderer.setAnimationLoop(function(){cube.groups.forEach(function(t){target.x=15e-5*(1-mouse.x),target.y=15e-5*(-500-mouse.y),t.rotation.x+=.05*(target.y-t.rotation.x),t.rotation.y+=.05*(target.x-t.rotation.y)}),t.composer.render()})}},{key:"start",value:function(){loop.start()}},{key:"stop",value:function(){loop.stop()}}]),e}();export{World};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
