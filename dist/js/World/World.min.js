function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var o=0;o<t.length;o++){var r=t[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,o){return t&&_defineProperties(e.prototype,t),o&&_defineProperties(e,o),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var o=e[Symbol.toPrimitive];if(void 0===o)return("string"===t?String:Number)(e);o=o.call(e,t||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}import{Vector2}from"../../../../node_modules/three/build/three.module.js";import{createCamera}from"./components/camera.min.js";import{createCube}from"./components/cube.min.js";import{createScene}from"./components/scene.min.js";import{createControls}from"./systems/controls.min.js";import{createRenderer}from"./systems/renderer.min.js";import{Resizer}from"./systems/Resizer.min.js";import{Loop}from"./systems/Loop.min.js";import{CurtainShader}from"./components/effect.min.js";import{RGBAShader}from"./components/effect2.min.js";import{EffectComposer}from"https://cdn.skypack.dev/three@0.128.0/examples/jsm/postprocessing/EffectComposer.js";import{RenderPass}from"https://cdn.skypack.dev/three@0.128.0/examples/jsm/postprocessing/RenderPass.js";import{ShaderPass}from"https://cdn.skypack.dev/three@0.128.0/examples/jsm/postprocessing/ShaderPass.js";import{GUI}from"./../../../node_modules/dat.gui/build/dat.gui.module.js";import{gsap}from"./../../../node_modules/gsap/index.js";var renderer,scene,loop,mouse=new Vector2,target=new Vector2,windowHalf=new Vector2(window.innerWidth/2,window.innerHeight/2),camera=createCamera(),cube=createCube(),World=function(){function t(e){_classCallCheck(this,t),renderer=createRenderer(),scene=createScene(),loop=new Loop(camera,scene,renderer),e.append(renderer.domElement),this.initPost(),this.render(),cube.groups.forEach(function(e){scene.add(e)}),this.time=0,this.mouse=new Vector2,this.target=new Vector2,this.windowHalf=new Vector2(window.innerWidth/2,window.innerHeight/2),document.addEventListener("mousemove",this.onMouseMove,!1),this.resizer=new Resizer(e,camera,renderer,this.composer),this.settings()}return _createClass(t,[{key:"settings",value:function(){var t=this;this.settings={progress:0,progress1:0,runAnimation:function(){t.runAnimation()}},this.gui=new GUI,this.gui.add(this.settings,"progress",0,1,.01),this.gui.add(this.settings,"progress1",0,1,.01).onChange(function(e){t.effectPass.uniforms.uProgress.value=e}),this.gui.add(this.settings,"runAnimation")}},{key:"runAnimation",value:function(){var e=gsap.timeline();e.to(camera.position,{x:camera.position.x+2500,duration:1.5,ease:"power4.inOut"}),e.to(camera.position,{z:700,duration:1,ease:"power4.inOut"},0),e.to(camera.position,{z:900,duration:1,ease:"power4.inOut"},1),e.to(this.effectPass.uniforms.uProgress,{value:1,duration:1,ease:"power3,inOut"},0),e.to(this.effectPass.uniforms.uProgress,{value:0,duration:1,ease:"power3,inOut"},1),e.to(this.effectPass1.uniforms.uProgress,{value:1,duration:1,ease:"power3,inOut"},0),e.to(this.effectPass1.uniforms.uProgress,{value:0,duration:1,ease:"power3,inOut"},1)}},{key:"initPost",value:function(){this.composer=new EffectComposer(renderer);var e=new RenderPass(scene,camera);this.composer.addPass(e),this.effectPass=new ShaderPass(CurtainShader),this.composer.addPass(this.effectPass),this.effectPass1=new ShaderPass(RGBAShader),this.composer.addPass(this.effectPass1)}},{key:"onMouseMove",value:function(e){mouse.x=e.clientX-windowHalf.x,mouse.y=e.clientY-windowHalf.x}},{key:"render",value:function(){var o=this;requestAnimationFrame(this.render.bind(this)),this.time+=.05,this.oscilator=.5*Math.sin(.1*this.time)+.5,renderer.setAnimationLoop(function(){cube.groups.forEach(function(e){target.x=15e-5*(1-mouse.x),target.y=14e-5*(-500-mouse.y),e.rotation.x+=.05*(target.y-e.rotation.x),e.rotation.y+=.05*(target.x-e.rotation.y),e.children.forEach(function(e,t){e.position.z=100*(t+1)-200*o.oscilator})}),o.composer.render()})}},{key:"start",value:function(){loop.start()}},{key:"stop",value:function(){loop.stop()}}]),t}();export{World};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
