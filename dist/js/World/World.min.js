function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,_toPropertyKey(o.key),o)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0===r)return("string"===t?String:Number)(e);r=r.call(e,t||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}import{Vector2}from"../../../../node_modules/three/build/three.module.js";import{createCamera}from"./components/camera.min.js";import{createCube}from"./components/cube.min.js";import{createScene}from"./components/scene.min.js";import{createRenderer}from"./systems/renderer.min.js";import{Resizer}from"./systems/Resizer.min.js";import{Loop}from"./systems/Loop.min.js";var renderer,scene,loop,mouse=new Vector2,target=new Vector2,windowHalf=new Vector2(window.innerWidth/2,window.innerHeight/2),camera=createCamera(),cube=createCube(),World=function(){function t(e){_classCallCheck(this,t),renderer=createRenderer(),scene=createScene(),loop=new Loop(camera,scene,renderer),e.append(renderer.domElement),this.mouse=new Vector2,this.target=new Vector2,this.windowHalf=new Vector2(window.innerWidth/2,window.innerHeight/2),loop.updatables.push(target,cube),target.tick=function(){target.x=15e-5*(1-mouse.x),target.y=14e-5*(-500-mouse.y)},cube.tick=function(){cube.rotation.x+=.05*(target.y-cube.rotation.x),cube.rotation.y+=.05*(target.x-cube.rotation.y)},scene.add(cube),document.addEventListener("mousemove",this.onMouseMove,!1);new Resizer(e,camera,renderer)}return _createClass(t,[{key:"onMouseMove",value:function(e){mouse.x=e.clientX-windowHalf.x,mouse.y=e.clientY-windowHalf.x}},{key:"animate",value:function(){requestAnimationFrame(this.render)}},{key:"render",value:function(){renderer.render(scene,camera)}},{key:"start",value:function(){loop.start()}},{key:"stop",value:function(){loop.stop()}}]),t}();export{World};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldvcmxkL1dvcmxkLmpzIl0sIm5hbWVzIjpbIlZlY3RvcjIiLCJjcmVhdGVDYW1lcmEiLCJjcmVhdGVDdWJlIiwiY3JlYXRlU2NlbmUiLCJyZW5kZXJlciIsInNjZW5lIiwibG9vcCIsIm1vdXNlIiwiTG9vcCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIndpbmRvd0hhbGYiLCJXb3JsZCIsImNvbnRhaW5lciIsImFwcGVuZCIsImRvbUVsZW1lbnQiLCJ0aGlzIiwidGFyZ2V0IiwidXBkYXRhYmxlcyIsInB1c2giLCJjdWJlIiwicm90YXRpb24iLCJhZGQiLCJkb2N1bWVudCIsInJlc2l6ZXIiLCJSZXNpemVyIiwiY2FtZXJhIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJldmVudCIsInkiLCJjbGllbnRZIiwieCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJlbmRlciIsInN0YXJ0Iiwic3RvcCJdLCJtYXBwaW5ncyI6InFqQ0FBU0EsT0FBcUUsS0FBdEQsOERBQ2ZDLFlBQWdELEtBQTVCLG9DQUNwQkMsVUFBNEMsS0FBMUIsa0NBQ2xCQyxXQUE4QyxLQUEzQixtQ0FIbkJILGNBQWUsS0FBQSxtQ0FDZkMsT0FBb0IsS0FBUixrQ0FDWkMsSUFBa0IsS0FBUix3QkFRbkIsSUFBSUUsU0FMSkMsTUFDQUMsS0FFQUMsTUFBU0MsSUFBSVIsUUFFVEksT0FBUSxJQUFBSixRQUNSSyxXQUFLLElBQUFMLFFBQUFTLE9BQUFDLFdBQUEsRUFBQUQsT0FBQUUsWUFBQSxDQUFBLEVBQ0xMLE9BQUlMLGFBQUEsRUFFSk0sS0FBS0wsV0FBT0YsRUFFWlksTUFBQUEsV0FDSixTQUFBQyxFQUFhWixHQUFBQSxnQkFBQUEsS0FBQUEsQ0FBQUEsRUFDYkcsU0FBV0YsZUFBWSxFQUFDRyxNQUViRixZQUFBLEVBQ1ZHLEtBQUEsSUFBQUUsS0FBWU0sT0FBU1QsTUFBRUQsUUFBQSxFQUl0QlUsRUFKc0JDLE9BQUFYLFNBQUFZLFVBQUEsRUFZdEJDLEtBSkFWLE1BQUEsSUFBQVAsUUFLQWlCLEtBSkFDLE9BQUEsSUFBQWxCLFFBS0FpQixLQUpBTCxXQUFBLElBQUFaLFFBS0NTLE9BQU9DLFdBQWEsRUFDcEJELE9BSklGLFlBQVlQLENBQUFBLEVBV2pCTSxLQUFLYSxXQUFXQyxLQUFLRixPQUFRRyxJQUFJLEVBRWpDSCxPQUFBQSxLQUFXLFdBQ1ZBLE9BQUFBLEVBQXVCLE9BQWYsRUFBS1gsTUFBR0EsR0FDaEJXLE9BQUFBLEVBQTBCLE9BQWxCLENBQUEsSUFBUVgsTUFBR0EsRUFDcEIsRUFDQWMsS0FBQUEsS0FBUyxXQUNSQSxLQUFBQSxTQUFLQyxHQUFVLEtBQVFKLE9BQUlBLEVBQVFHLEtBQUdBLFNBQUtDLEdBQzNDRCxLQUFBQSxTQUFLQyxHQUFVLEtBQVFKLE9BQUlBLEVBQVFHLEtBQUdBLFNBQUtDLEVBQzVDLEVBRUFqQixNQUFNa0IsSUFBSUYsSUFBSSxFQUlkRyxTQUVNQyxpQkFBY0MsWUFBbUJDLEtBQUFBLFlBQWlCLENBQUEsQ0FBQSxFQUF4QyxJQUFJRCxRQUFRWixFQUFXYSxPQUFRdkIsUUFBUSxDQUN4RCxDQXVDQyxPQXRCRHdCLGFBQUFmLEVBQUEsQ0FBQSxDQUFBZ0IsSUFBQSxjQUFBQyxNQUVBLFNBQ1FDLEdBQVB4QixNQUNBQSxFQUFNeUIsRUFBSUQsUUFBTUUsV0FBVXJCLEVBQTFCTCxNQUNEeUIsRUFBQUQsRUFBQUUsUUFBQXJCLFdBQUFzQixDQUFBLENBQUMsRUFBQSxDQUFBTCxJQUFBLFVBQUFDLE1BRUQsV0FDQ0ssc0JBQUFBLEtBQXNCQyxNQUFLQSxDQUM1QixDQUFDLEVBQUEsQ0FBQVAsSUFBQSxTQUFBQyxNQUVELFdBRUMxQixTQURBZ0MsT0FBQS9CLE1BQUFzQixNQUFBLENBRUQsQ0FBQyxFQUFBLENBQUFFLElBQUEsUUFBQUMsTUFFRCxXQUNDeEIsS0FIQStCLE1BQUEsQ0FJRCxDQUFDLEVBQUEsQ0FBQVIsSUFBQSxPQUFBQyxNQUVELFdBRkN4QixLQUFBZ0MsS0FBQSxDQUlELENBQUMsRUFBQSxFQUFBekIsQ0FBQSxFQUFBLFNBQURBLEtBQUEiLCJmaWxlIjoiV29ybGQvV29ybGQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdGhyZWUvYnVpbGQvdGhyZWUubW9kdWxlLmpzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUNhbWVyYSB9IGZyb20gXCIuL2NvbXBvbmVudHMvY2FtZXJhLm1pbi5qc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVDdWJlIH0gZnJvbSBcIi4vY29tcG9uZW50cy9jdWJlLm1pbi5qc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVTY2VuZSB9IGZyb20gXCIuL2NvbXBvbmVudHMvc2NlbmUubWluLmpzXCI7XHJcblxyXG4vLyBpbXBvcnQgeyBjcmVhdGVDb250cm9scyB9IGZyb20gXCIuL3N5c3RlbXMvY29udHJvbHMubWluLmpzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVJlbmRlcmVyIH0gZnJvbSBcIi4vc3lzdGVtcy9yZW5kZXJlci5taW4uanNcIjtcclxuaW1wb3J0IHsgUmVzaXplciB9IGZyb20gXCIuL3N5c3RlbXMvUmVzaXplci5taW4uanNcIjtcclxuaW1wb3J0IHsgTG9vcCB9IGZyb20gXCIuL3N5c3RlbXMvTG9vcC5taW4uanNcIjtcclxuXHJcbmxldCByZW5kZXJlcjtcclxubGV0IHNjZW5lO1xyXG5sZXQgbG9vcDtcclxuXHJcbmxldCBtb3VzZSA9IG5ldyBWZWN0b3IyKCk7XHJcbmxldCB0YXJnZXQgPSBuZXcgVmVjdG9yMigpO1xyXG5sZXQgd2luZG93SGFsZiA9IG5ldyBWZWN0b3IyKHdpbmRvdy5pbm5lcldpZHRoIC8gMiwgd2luZG93LmlubmVySGVpZ2h0IC8gMik7XHJcbmxldCBjYW1lcmEgPSBjcmVhdGVDYW1lcmEoKTtcclxubGV0IGN1YmUgPSBjcmVhdGVDdWJlKCk7XHJcblxyXG5jbGFzcyBXb3JsZCB7XHJcblx0Y29uc3RydWN0b3IoY29udGFpbmVyKSB7XHJcblx0XHRyZW5kZXJlciA9IGNyZWF0ZVJlbmRlcmVyKCk7XHJcblx0XHRzY2VuZSA9IGNyZWF0ZVNjZW5lKCk7XHJcblx0XHRsb29wID0gbmV3IExvb3AoY2FtZXJhLCBzY2VuZSwgcmVuZGVyZXIpO1xyXG5cdFx0Y29udGFpbmVyLmFwcGVuZChyZW5kZXJlci5kb21FbGVtZW50KTtcclxuXHJcblx0XHQvLyB0aGlzLm1vdXNlUG9zWCA9IDA7XHJcblx0XHQvLyB0aGlzLm1vdXNlUG9zWSA9IDA7XHJcblx0XHQvLyB0aGlzLnBhcmFtc0ludGVuc2lmeSA9IDAuMjtcclxuXHRcdC8vIHRoaXMucGFyYW1zRWFzZSA9IDAuMDg7XHJcblx0XHQvLyB0aGlzLmluaXRaID0gdGhpcy5jYW1lcmEucG9zaXRpb24uejtcclxuXHJcblx0XHR0aGlzLm1vdXNlID0gbmV3IFZlY3RvcjIoKTtcclxuXHRcdHRoaXMudGFyZ2V0ID0gbmV3IFZlY3RvcjIoKTtcclxuXHRcdHRoaXMud2luZG93SGFsZiA9IG5ldyBWZWN0b3IyKFxyXG5cdFx0XHR3aW5kb3cuaW5uZXJXaWR0aCAvIDIsXHJcblx0XHRcdHdpbmRvdy5pbm5lckhlaWdodCAvIDJcclxuXHRcdCk7XHJcblxyXG5cdFx0Ly8gY29uc3QgY29udHJvbHMgPSBjcmVhdGVDb250cm9scyhjYW1lcmEsIHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xyXG5cclxuXHRcdC8vIHRoaXMuY3ViZSA9IGNyZWF0ZUN1YmUoKTtcclxuXHJcblx0XHRsb29wLnVwZGF0YWJsZXMucHVzaCh0YXJnZXQsIGN1YmUpO1xyXG5cclxuXHRcdHRhcmdldC50aWNrID0gKCkgPT4ge1xyXG5cdFx0XHR0YXJnZXQueCA9ICgxIC0gbW91c2UueCkgKiAwLjAwMDE1O1xyXG5cdFx0XHR0YXJnZXQueSA9ICgtNTAwIC0gbW91c2UueSkgKiAwLjAwMDE0O1xyXG5cdFx0fTtcclxuXHRcdGN1YmUudGljayA9ICgpID0+IHtcclxuXHRcdFx0Y3ViZS5yb3RhdGlvbi54ICs9IDAuMDUgKiAodGFyZ2V0LnkgLSBjdWJlLnJvdGF0aW9uLngpO1xyXG5cdFx0XHRjdWJlLnJvdGF0aW9uLnkgKz0gMC4wNSAqICh0YXJnZXQueCAtIGN1YmUucm90YXRpb24ueSk7XHJcblx0XHR9O1xyXG5cclxuXHRcdHNjZW5lLmFkZChjdWJlKTtcclxuXHJcblx0XHQvLyB0aGlzLmNhbVBhcmFsbGF4KCk7XHJcblxyXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm9uTW91c2VNb3ZlLCBmYWxzZSk7XHJcblxyXG5cdFx0Y29uc3QgcmVzaXplciA9IG5ldyBSZXNpemVyKGNvbnRhaW5lciwgY2FtZXJhLCByZW5kZXJlcik7XHJcblx0fVxyXG5cclxuXHQvLyBjYW1QYXJhbGxheCgpIHtcclxuXHQvLyBcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIChlKSA9PiB7XHJcblx0Ly8gXHRcdHRoaXMubW91c2VQb3NYID1cclxuXHQvLyBcdFx0XHQoZS5jbGllbnRYIC0gd2luZG93LmlubmVyV2lkdGggLyAyKSAqIHRoaXMucGFyYW1zSW50ZW5zaWZ5O1xyXG5cdC8vIFx0XHR0aGlzLm1vdXNlUG9zWSA9XHJcblx0Ly8gXHRcdFx0KGUuY2xpZW50WSAtIHdpbmRvdy5pbm5lckhlaWdodCAvIDIpICogdGhpcy5wYXJhbXNJbnRlbnNpZnk7XHJcblxyXG5cdC8vIFx0XHR0aGlzLmNhbWVyYS5wb3NpdGlvbi54ICs9XHJcblx0Ly8gXHRcdFx0KHRoaXMubW91c2VQb3NYIC0gdGhpcy5jYW1lcmEucG9zaXRpb24ueCkgKiB0aGlzLnBhcmFtc0Vhc2U7XHJcblx0Ly8gXHRcdHRoaXMuY2FtZXJhLnBvc2l0aW9uLnkgKz1cclxuXHQvLyBcdFx0XHQodGhpcy5tb3VzZVBvc1kgLSB0aGlzLmNhbWVyYS5wb3NpdGlvbi55KSAqIHRoaXMucGFyYW1zRWFzZTtcclxuXHQvLyBcdFx0dGhpcy5jYW1lcmEucG9zaXRpb24ueiArPVxyXG5cdC8vIFx0XHRcdCh0aGlzLmluaXRaIC0gdGhpcy5jYW1lcmEucG9zaXRpb24ueikgKiB0aGlzLnBhcmFtc0Vhc2U7XHJcblx0Ly8gXHRcdC8vIHRoaXMuY2FtZXJhLmxvb2tBdCgwLCAwLCA5MDApO1xyXG5cdC8vIFx0fSk7XHJcblx0Ly8gfVxyXG5cclxuXHRvbk1vdXNlTW92ZShldmVudCkge1xyXG5cdFx0bW91c2UueCA9IGV2ZW50LmNsaWVudFggLSB3aW5kb3dIYWxmLng7XHJcblx0XHRtb3VzZS55ID0gZXZlbnQuY2xpZW50WSAtIHdpbmRvd0hhbGYueDtcclxuXHR9XHJcblxyXG5cdGFuaW1hdGUoKSB7XHJcblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5yZW5kZXIpO1xyXG5cdH1cclxuXHJcblx0cmVuZGVyKCkge1xyXG5cdFx0Ly8gZHJhdyBhIHNpbmdsZSBmcmFtZVxyXG5cdFx0cmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xyXG5cdH1cclxuXHJcblx0c3RhcnQoKSB7XHJcblx0XHRsb29wLnN0YXJ0KCk7XHJcblx0fVxyXG5cclxuXHRzdG9wKCkge1xyXG5cdFx0bG9vcC5zdG9wKCk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgeyBXb3JsZCB9O1xyXG4iXX0=
